package ar.com.fitlandia.fitlandia;

import android.graphics.Color;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import android.widget.LinearLayout;

import java.util.ArrayList;

import java.util.Date;
import java.util.List;

import ar.com.fitlandia.fitlandia.models.LogPesoModel;

import ar.com.fitlandia.fitlandia.utils.APIService;
import ar.com.fitlandia.fitlandia.utils.ApiUtils;
import ar.com.fitlandia.fitlandia.utils.ApplicationGlobal;
import ar.com.fitlandia.fitlandia.models.UsuarioModel;
import ar.com.fitlandia.fitlandia.utils.APIService;
import butterknife.BindView;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;

import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;
import lecho.*;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class HistoricoPeso extends AppCompatActivity {
    private APIService api;
    ApplicationGlobal applicationGlobal;
    @BindView(R.id.layout_peso)
    LinearLayout layout_peso;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_historico_peso);
        api = ApiUtils.getAPIService();
        applicationGlobal = ApplicationGlobal.getInstance();
        api.getLogPesos(applicationGlobal.getUsername()).enqueue(new Callback<List<LogPesoModel>>() {
            @Override
            public void onResponse(Call<List<LogPesoModel>> call, Response<List<LogPesoModel>> response) {
                List<LogPesoModel> pesos;
                pesos = response.body();
                cargarGrafico(pesos);

            }



            @Override
            public void onFailure(Call<List<LogPesoModel>> call, Throwable t) {

            }
        });
    }


    private void cargarGrafico(  List<LogPesoModel> pesos) {
        List<PointValue> values = new ArrayList<PointValue>();
        for(int i =0; i<pesos.size();i++){
           LogPesoModel peso= (LogPesoModel) pesos.get(i);

            values.add(new PointValue(i,  peso.getPeso()));
        }

        Line line = new Line(values).setColor(Color.rgb(199, 0, 57  )).setCubic(true);
        List<Line> lines = new ArrayList<Line>();
        lines.add(line);

        LineChartData data = new LineChartData();
        data.setLines(lines);

        LineChartView chart = findViewById(R.id.grafico);
        chart.setScaleX(new Float(1));
        chart.setScaleY(new Float(1));

        List<AxisValue> xAxisValues = new ArrayList<AxisValue>();
        List<Float> xAxisValues1 = new ArrayList<Float>();
        List<String> yAxisValues1 = new ArrayList<String>();
        // List<String> xAxisValues2 = new ArrayList<String>();
        //X axis label for value 1
        xAxisValues1.add(1.0f);
        Date today= new Date();
        yAxisValues1.add(today.toString());
        //X axis labels for values 5,10,15,20,25,30
        for(int i = 5; i <= 30; i+=5) {
            xAxisValues1.add(Float.valueOf(i));

            yAxisValues1.add( (new Date (today.getTime ()+i) ).toString() );
        }

        Axis xAxis = Axis.generateAxisFromCollection(xAxisValues1,yAxisValues1);
        Axis yAxis = Axis.generateAxisFromCollection(xAxisValues1);
        xAxis.setAutoGenerated(true);
        xAxis.setTextSize(9);
        xAxis.setHasLines(true);

        List<String> yAxisValues2 = new ArrayList<String>();
        //X axis label for value 1


        yAxis.setAutoGenerated(true);
        yAxis.setTextSize(8);
        yAxis.setHasLines(true);
        data.setAxisYLeft(yAxis);
        data.setAxisXBottom(xAxis);
        chart.setValueSelectionEnabled(true);

        chart.setLineChartData(data);
    }
}



